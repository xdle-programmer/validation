{"version":3,"sources":["../src/script.js"],"names":["factory","define","amd","exports","module","window","Validation","options","formClass","$form","document","getElementsByClassName","formFieldClass","$formFields","errorWrapperClass","errorShowClass","buttonClass","$button","buttonDisabledClass","rulesList","Map","checkEvents","errorMessage","functionCheck","validateInputEmpty","validateMinCountSymbols","fieldsArray","createFieldsArray","addAllListeners","createErrorWrappers","validationForm","$formField","elem","dataset","rules","rule","split","$elem","querySelector","fieldObject","$field","push","showError","errors","field","error","validateField","length","classList","add","remove","get","validateResult","validate","sort","a","b","priority","$error","textContent","message","template","insertAdjacentHTML","eventChecks","eventCheck","addEventListener","bind","event","preventDefault","val","value","minCount","parseInt","minCountSymbol"],"mappings":"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","sourcesContent":["(function (factory) {\r\n    if (typeof define === \"function\" && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define([], factory);\r\n    } else if (typeof exports === \"object\") {\r\n        // Node/CommonJS\r\n        module.exports = factory();\r\n    } else {\r\n        // Browser globals\r\n        window.Validation = factory();\r\n    }\r\n})(function () {\r\n\r\n    class Validation {\r\n\r\n        /* Example options\r\n        {\r\n            formClass:'form-check',     // String\r\n            $form:document.getElementsByClassName(this.formClass)[0],       // node element\r\n            formFieldClass:'form-check__field',     // String\r\n            $formFields:document.getElementsByClassName('form-check__field'),       // html collection\r\n            errorWrapperClass:'form-check__error',     // String\r\n            errorShowClass:'form-check__error--show',     // String\r\n            buttonClass:'form-check__button',     // String\r\n            $button:document.getElementsByClassName(this.formClass)[0],       // node element\r\n            buttonDisabledClass:'form-check__button--disabled',     // String\r\n        }\r\n         */\r\n\r\n        constructor(options) {\r\n            this.formClass = options && options.formClass ? options.formClass : 'form-check';\r\n            this.$form = options && options.$form ? options.$form : document.getElementsByClassName(this.formClass)[0];\r\n\r\n            this.formFieldClass = options && options.formClass ? options.formClass : 'form-check__field';\r\n            this.$formFields = options && options.$formFields ? options.$formFields : this.$form.getElementsByClassName(this.formFieldClass);\r\n            this.errorWrapperClass = options && options.errorWrapperClass ? options.errorWrapperClass : 'form-check__error';\r\n            this.errorShowClass = options && options.errorShowClass ? options.errorShowClass : 'form-check__error--show';\r\n            this.buttonClass = options && options.buttonClass ? options.buttonClass : 'form-check__button';\r\n            this.$button = options && options.$button ? options.$button : this.$form.getElementsByClassName(this.buttonClass)[0];\r\n            this.buttonDisabledClass = options && options.buttonDisabledClass ? options.buttonDisabledClass : 'form-check__button--disabled';\r\n\r\n            this.rulesList = new Map([\r\n                ['input-empty', {\r\n                    checkEvents: ['change'],\r\n                    errorMessage: 'Обязательное поле',\r\n                    functionCheck: this.validateInputEmpty,\r\n                }],\r\n                ['min-count-symbol', {\r\n                    checkEvents: ['change'],\r\n                    errorMessage: 'Минимум символов: ',\r\n                    functionCheck: this.validateMinCountSymbols,\r\n                }],\r\n            ]);\r\n        }\r\n\r\n        init() {\r\n            this.fieldsArray = this.createFieldsArray();\r\n            this.addAllListeners();\r\n            this.createErrorWrappers();\r\n            this.validationForm(false);\r\n        }\r\n\r\n        // TODO: Сделать правила проверки в виде статик метода\r\n\r\n        // Создание объекта с полями\r\n        createFieldsArray() {\r\n            let fieldsArray = [];\r\n\r\n            for (let $formField of this.$formFields) {\r\n\r\n                // Собираем дата атрибуты для определения типа проверки и элемента\r\n                let elem = $formField.dataset.elem;\r\n                let rules = $formField.dataset.rule.split(', ');\r\n\r\n                // Определяем элемент, который будем проверять\r\n                let $elem;\r\n\r\n                if (elem !== 'self-dispatch') {\r\n                    $elem = $formField.querySelector(elem);\r\n                } else {\r\n                    $elem = $formField;\r\n                }\r\n\r\n                let fieldObject = {\r\n                    elem: elem,\r\n                    rules: rules,\r\n                    $elem: $elem,\r\n                    $field: $formField\r\n                };\r\n\r\n                fieldsArray.push(fieldObject);\r\n            }\r\n\r\n            return fieldsArray;\r\n        }\r\n\r\n        // Валидация всей формы\r\n        validationForm(showError) {\r\n            let errors = [];\r\n\r\n            for (let field of this.fieldsArray) {\r\n                let error = this.validateField(field, showError);\r\n\r\n                if (error !== false) {\r\n                    errors.push(error);\r\n                }\r\n            }\r\n\r\n            if (errors.length > 0) {\r\n                this.$button.classList.add(this.buttonDisabledClass);\r\n            } else {\r\n                this.$button.classList.remove(this.buttonDisabledClass);\r\n            }\r\n        }\r\n\r\n        // Валидация одного поля\r\n        validateField(field, showError) {\r\n            let errors = [];\r\n\r\n            // Выполняем последовательно проверки\r\n            for (let rule of field.rules) {\r\n                let errorMessage = this.rulesList.get(rule).errorMessage;\r\n\r\n                let validateResult = this.rulesList.get(rule).functionCheck(field.$field, field.$elem, errorMessage);\r\n\r\n                if (!validateResult.validate) {\r\n                    errors.push(validateResult);\r\n                }\r\n            }\r\n\r\n            // Определяем наиболее приоритетную ошибку и оставляем в массиве только ее\r\n            if (errors.length > 0) {\r\n                errors.sort((a, b) => {\r\n                    return a.priority < b.priority ? 1 : -1;\r\n                });\r\n\r\n                errors = errors[0];\r\n            } else {\r\n                field.$field.classList.remove(this.errorShowClass);\r\n                return false;\r\n            }\r\n\r\n            field.$error.textContent = errors.message;\r\n\r\n            if (showError) {\r\n                field.$field.classList.add(this.errorShowClass);\r\n            }\r\n\r\n            return errors;\r\n        }\r\n\r\n        // Создание полей с ошибками\r\n        createErrorWrappers() {\r\n            for (let field of this.fieldsArray) {\r\n                let template = `<div class=\"${this.errorWrapperClass}\"></div>`;\r\n\r\n                if (field.$field.getElementsByClassName(this.errorWrapperClass).length > 0) {\r\n                    field.$field.insertAdjacentHTML('beforeEnd', template);\r\n                }\r\n\r\n                field.$field.insertAdjacentHTML('beforeEnd', template);\r\n                field.$error = field.$field.getElementsByClassName(this.errorWrapperClass)[0];\r\n            }\r\n        }\r\n\r\n        // Создание событий\r\n        addAllListeners() {\r\n            for (let field of this.fieldsArray) {\r\n                for (let rule of field.rules) {\r\n                    let eventChecks = this.rulesList.get(rule).checkEvents;\r\n\r\n                    for (let eventCheck of eventChecks) {\r\n                        field.$elem.addEventListener(eventCheck, () => {\r\n                            this.validateField.bind(this, field, true)();\r\n                            this.validationForm.bind(this, false)();\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.$button.addEventListener('click', (event) => {\r\n                event.preventDefault();\r\n                this.validationForm(true);\r\n            });\r\n        }\r\n\r\n        // Проверка пустого поля\r\n        validateInputEmpty($field, $elem, errorMessage) {\r\n            let val = $elem.value;\r\n            let validate = val !== '';\r\n            let priority = 100;\r\n\r\n            return {\r\n                validate: validate,\r\n                message: errorMessage,\r\n                priority: priority\r\n            };\r\n        }\r\n\r\n        // Проверка минимального количества символов\r\n        validateMinCountSymbols($field, $elem, errorMessage) {\r\n            let val = $elem.value;\r\n            let minCount = parseInt($field.dataset.minCountSymbol);\r\n            let validate = val.length >= minCount;\r\n            let message = errorMessage + minCount;\r\n            let priority = 200;\r\n\r\n            return {\r\n                validate: validate,\r\n                message: message,\r\n                priority: priority\r\n            };\r\n        }\r\n    }\r\n\r\n    return Validation;\r\n});\r\n"],"file":"script.js"}